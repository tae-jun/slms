import express = require('express');
import connect = require('./connect');
import mongodb = require('mongodb');
import ObjectID = mongodb.ObjectID;
import lights = require('./lights');

var db: mongodb.Db;
var groups: mongodb.Collection;

// For jasmine test
export var isConnected: boolean = false;
export var done: Function = null;              // jasmine function for asynchronous test

connect('groups', (_db: mongodb.Db) => {
    db = _db;

    db.collection('groups', (err: Error, collection: mongodb.Collection) => {
        isConnected = true
        groups = collection;

        if (done != null)
            done();
    });
});

export class Group {
    _id: string;
    name: string;
}

export function create(group: Group, callback?: (result: Group) => void): Group {
    var _result = new Group();

    groups.insert(group, { w: 1 }, (err: Error, result: Group[]) => {
        if (err) { console.dir(err); }

        var group = result.pop();
        var keys = Object.keys(group);
        for (var i = 0; i < keys.length; i++) {
            _result[keys[i]] = group[keys[i]];
        }

        if (callback != undefined)
            callback(group);
    })

    return _result;
}

export function findAll(callback?: (items?: Group[]) => void): Group[] {
    var _items = new Array();

    groups.find().toArray((err: Error, items: Group[]) => {
        if (err) { console.dir(err); }
        _items.push(items);

        if (callback != undefined)
            callback(items);
    });

    return _items;
}


export function findByID(groupID: string, callback?: (item: Group) => void): Group {
    var _item = new Group();

    groups.findOne({ _id: new ObjectID(groupID) }, (err: Error, item: Group) => {
        if (err) { console.dir(err); }

        var keys = Object.keys(item);
        for (var i = 0; i < keys.length; i++) {
            _item[keys[i]] = item[keys[i]];
        }
        
        if (callback != undefined)
            callback(_item);
    });

    return _item;
}

export function update(groupID: string, values: any, callback?: (result: number) => void): void {
    groups.update({ _id: new ObjectID(groupID) }, { $set: values }, (err, result) => {
        if (err) { console.dir(err); }
        
        if (callback != undefined)
            callback(result);
    });
}

export function remove(groupID: string, callback?: (result: any) => void): void {
    var lightsColl = lights.getLightsColl();

    lightsColl.update({ groupID: groupID }, { $set: { groupID: null } }, { w: 1, multi: true }, (err, lightResult) => {

        if (err) {
            callback(null);
            return console.dir(err);
        }
        else {
            groups.remove({ _id: new ObjectID(groupID) }, (err, groupResult) => {
                callback({
                    lights: lightResult,
                    groups: groupResult
                });
            });
        }
    });
}
